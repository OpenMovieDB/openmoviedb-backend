// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// ====================================================
//                       USER
// ====================================================

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

// ====================================================
//                    EXTERNAL ID
// ====================================================

enum ExternalIDSource {
  IMDB
  TMDB
  WIKIPEDIA
  KINOPOISK
}

enum ExternalIDType {
  MOVIE
  PERSON
}

model ExternalID {
  source    ExternalIDSource
  type      ExternalIDType
  value     String
  movieId   String?          @db.Uuid
  movie     Movie?           @relation(fields: [movieId], references: [id])
  person    Person?          @relation(fields: [personId], references: [id])
  personId  String?          @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@id([source, value])
}

// ====================================================
//                       MOVIE
// ====================================================

enum MovieType {
  MOVIE
  TV_SERIES
}

model Movie {
  id          String             @id @default(uuid()) @db.Uuid
  slug        String             @unique
  type        MovieType
  externalID  ExternalID[]
  title       String
  description String?
  year        Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  medias      MediaLink[]
  images      ImageLink[]
  persons     FilmographyEntry[]
  genres      Genre[]
  countries   Country[]
  releases    ReleaseDate[]
  seasons     Season[]
  rating      Rating             @relation(fields: [ratingId], references: [id])
  ratingId    String             @unique @db.Uuid
}

// ====================================================
//                      RATING
// ====================================================

model Rating {
  id            String         @id @default(uuid()) @db.Uuid
  votes         Vote[]
  vendorRatings VendorRating[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  movie         Movie?
}

model Vote {
  id        String   @id @default(uuid()) @db.Uuid
  value     Int      @default(0)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid
  rating    Rating   @relation(fields: [ratingId], references: [id])
  ratingId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, ratingId])
}

enum Vendor {
  KINOPOISK
  IMDB
  TMDB
  ROTTEN_TOMATOES
}

model VendorRating {
  id        String   @id @default(uuid()) @db.Uuid
  vendor    Vendor
  value     Float    @default(0)
  rating    Rating   @relation(fields: [ratingId], references: [id])
  ratingId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([vendor, ratingId])
}

// ====================================================
//                      SEASON
// ====================================================

model Season {
  id          String        @id @default(uuid()) @db.Uuid
  number      Int
  episodes    Episode[]
  movie       Movie         @relation(fields: [movieId], references: [id])
  movieId     String        @db.Uuid
  releaseDate ReleaseDate[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// ====================================================
//                      EPISODE
// ====================================================

model Episode {
  id          String     @id @default(uuid()) @db.Uuid
  image       ImageLink? @relation(fields: [imageLinkId], references: [id])
  imageLinkId String?    @db.Uuid
  number      Int
  title       String
  season      Season     @relation(fields: [seasonId], references: [id])
  seasonId    String     @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ====================================================
//                     RELEASE_DATE
// ====================================================

enum ReleaseDateType {
  WORLDWIDE
  THEATRICAL
  DIGITAL
  PHYSICAL
  TV
}

model ReleaseDate {
  id        String          @id @default(uuid()) @db.Uuid
  type      ReleaseDateType
  date      DateTime
  country   Country         @relation(fields: [countryId], references: [id])
  countryId String          @db.Uuid
  movie     Movie           @relation(fields: [movieId], references: [id])
  movieId   String          @db.Uuid
  season    Season?         @relation(fields: [seasonId], references: [id])
  seasonId  String?         @db.Uuid
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

// ====================================================
//                       GENRE
// ====================================================

model Genre {
  id        String      @id @default(uuid()) @db.Uuid
  title     String
  images    ImageLink[]
  movies    Movie[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// ====================================================
//                       COUNTRY
// ====================================================

model Country {
  id           String        @id @default(uuid()) @db.Uuid
  title        String
  images       ImageLink[]
  movies       Movie[]
  releaseDates ReleaseDate[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// ====================================================
//                       PERSON
// ====================================================

enum PersonRoleType {
  ACTOR
  DIRECTOR
  WRITER
  PRODUCER
  COMPOSER
  CINEMATOGRAPHER
  EDITOR
}

model Person {
  id          String             @id @default(uuid()) @db.Uuid
  externalID  ExternalID[]
  name        String
  images      ImageLink[]
  filmography FilmographyEntry[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model FilmographyEntry {
  id          String         @id @default(uuid()) @db.Uuid
  role        PersonRoleType
  description String?
  person      Person         @relation(fields: [personId], references: [id])
  personId    String         @db.Uuid
  movie       Movie          @relation(fields: [movieId], references: [id])
  movieId     String         @db.Uuid
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// ====================================================
//                      SEO
// ====================================================

enum SeoType {
  OPEN_GRAPH
  TWITTER_CARD
  JSONLD
  BASIC
}

model Seo {
  id          String     @id @default(uuid()) @db.Uuid
  title       String?
  description String?
  imageLink   ImageLink? @relation(fields: [imageLinkId], references: [id])
  imageLinkId String?    @db.Uuid
  type        SeoType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

// ====================================================
//                      IMAGE
// ====================================================
enum ImageType {
  POSTER
  BACKDROP
  LOGO
  PHOTO
  STILL
  SHOOTING
  ICON
  PROFILE
  SEO
  HERO
}

enum ImageAssetFormat {
  AVIF
  GIF
  JPEG
  PNG
  WEBP
}

enum ImageAssetWidth {
  W375
  W768
  W1024
  W1280
  W1366
  W1600
  W1920
  W2560
}

model Image {
  id        String       @id @default(uuid()) @db.Uuid
  link      ImageLink?
  assets    ImageAsset[]
  height    Int
  width     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model ImageAsset {
  id        String           @id @default(uuid()) @db.Uuid
  format    ImageAssetFormat
  width     ImageAssetWidth
  url       String
  image     Image            @relation(fields: [imageId], references: [id])
  imageId   String           @db.Uuid
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model ImageLink {
  id        String    @id @default(uuid()) @db.Uuid
  image     Image     @relation(fields: [imageId], references: [id])
  imageId   String    @unique @db.Uuid
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   String?   @db.Uuid
  seo       Seo[]
  medias    Media[]
  episode   Episode[]
  person    Person[]
  genre     Genre[]
  country   Country[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// ====================================================
//                      MEDIA
// ====================================================

enum MediaType {
  TRAILER
  TEASER
  BACKDROP
  VIDEO
  AUDIO
}

enum MediaSource {
  YOUTUBE
  VIMEO
  S3
}

enum MediaFormat {
  MP4
  WEBM
  OGG
  MKV
  MP3
  WAV
}

model Media {
  id          String       @id @default(uuid()) @db.Uuid
  title       String
  images      ImageLink?   @relation(fields: [imageLinkId], references: [id])
  imageLinkId String       @db.Uuid
  asset       MediaAsset[]
  source      MediaSource
  mediaLink   MediaLink?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model MediaAsset {
  id        String      @id @default(uuid()) @db.Uuid
  url       String
  duration  Float
  type      MediaType
  source    MediaSource
  format    MediaFormat
  media     Media?      @relation(fields: [mediaId], references: [id])
  mediaId   String?     @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model MediaLink {
  id        String    @id @default(uuid()) @db.Uuid
  type      MediaType
  media     Media     @relation(fields: [mediaId], references: [id])
  mediaId   String    @unique @db.Uuid
  movie     Movie?    @relation(fields: [movieId], references: [id])
  movieId   String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
