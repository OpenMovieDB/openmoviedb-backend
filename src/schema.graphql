# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

input BlockCreateDto {
  blockType: BlockType!
  content: String!
  order: Int!
  title: String!
}

type BlockModel {
  blockType: BlockType!
  collections: [CollectionModel!]
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  images: [ImageLinkModel!]
  order: Int!
  sliders: [SliderModel!]
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type BlockModelEdge {
  cursor: String!
  node: BlockModel!
}

input BlockPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type BlockPaginationModel {
  edges: [BlockModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Type of the block"""
enum BlockType {
  IMAGE
  MOVIE_COLLECTION
  SLIDER
  TEXT
  VIDEO
}

input BlockUpdateDto {
  blockType: BlockType
  content: String
  order: Int
  title: String
}

input BooleanFilterInput {
  equals: Boolean
  in: [Boolean!]
  not: BooleanFilterInput
  notIn: [Boolean!]
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CollectionCreateDto {
  title: String!
}

type CollectionModel {
  block: BlockModel
  blockId: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  images: [ImageLinkModel!]
  pageInfo: PageInfoModel
  pageInfoId: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type CollectionModelEdge {
  cursor: String!
  node: CollectionModel!
}

input CollectionPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type CollectionPaginationModel {
  edges: [CollectionModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input CollectionUpdateDto {
  title: String
}

input CountryCreateDto {
  slug: String!
  title: String!
}

type CountryModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  images: [ImageLinkModel!]
  pageInfo: PageInfoModel!
  pageInfoId: String!
  slug: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type CountryModelEdge {
  cursor: String!
  node: CountryModel!
}

input CountryPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  title: String
  updatedAt: DateFilterInput
}

type CountryPaginationModel {
  edges: [CountryModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input CountryRelationInput {
  every: CountryWhereInput
  none: CountryWhereInput
  some: CountryWhereInput
}

input CountryUpdateDto {
  slug: String
  title: String
}

input CountryWhereInput {
  id: UuidFilterInput
  slug: StringFilterInput
  title: StringFilterInput
}

input CreateEpisodeInput {
  number: Int!
  title: String!
}

input CreateEpisodesInput {
  items: [CreateEpisodeInput!]!

  """Season ID"""
  seasonId: String!
}

input CreateExternalIDInput {
  movieId: String
  personId: String
  source: ExternalIDSource!
  type: ExternalIDType!
  value: String!
}

input CreateExternalIDsInput {
  ids: [CreateExternalIDInput!]!
}

input CreateFactInput {
  content: String!
  isSpoiler: Boolean!
  movieId: String!
}

input CreateFactsInput {
  items: [CreateFactInput!]!
}

input CreateGenreInput {
  slug: String!
  title: String!
}

input CreateGenresInput {
  items: [CreateGenreInput!]!
}

input CreateManySeoInput {
  items: [CreateSeoInput!]!
}

input CreateManyVendorRatingInput {
  vendorRatings: CreateVendorRatingInput!
}

input CreateReleaseDateInput {
  countryId: String!
  date: DateTime!
  episodeId: String!
  movieId: String!
  seasonId: String!
  type: ReleaseDateType!
}

input CreateReleaseDatesInput {
  items: [CreateReleaseDateInput!]!
}

input CreateSeasonInput {
  movieId: String!
  number: Int!
}

input CreateSeoInput {
  description: String
  pageInfoId: String!
  title: String
  type: SeoType
}

input CreateVendorRatingInput {
  ratingId: String!
  value: Float!
  vendor: VendorType!
}

input DateFilterInput {
  contains: DateTime
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateFilterInput
  notIn: [DateTime!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type EpisodeModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  image: ImageModel
  number: Int!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input ExternalIDCreateDto {
  movieId: String
  personId: String
  source: ExternalIDSource!
  type: ExternalIDType!
  value: String!
}

type ExternalIDModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  movieId: String
  personId: String
  source: ExternalIDSource!
  type: ExternalIDType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  value: String!
}

type ExternalIDModelEdge {
  cursor: String!
  node: ExternalIDModel!
}

input ExternalIDPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type ExternalIDPaginationModel {
  edges: [ExternalIDModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Source of the external id"""
enum ExternalIDSource {
  IMDB
  KINOPOISK
  TMDB
  WIKIPEDIA
}

input ExternalIDSourceEnumInput {
  equals: ExternalIDSource
  in: [ExternalIDSource!]
  notIn: [ExternalIDSource!]
}

"""Type of the external id"""
enum ExternalIDType {
  MOVIE
  PERSON
}

input ExternalIDTypeEnumInput {
  equals: ExternalIDType
  in: [ExternalIDType!]
  notIn: [ExternalIDType!]
}

input ExternalIDUpdateDto {
  movieId: String
  personId: String
  source: ExternalIDSource
  type: ExternalIDType
  value: String
}

input ExternalIdRelationInput {
  every: ExternalIdWhereInput
  none: ExternalIdWhereInput
  some: ExternalIdWhereInput
}

input ExternalIdWhereInput {
  source: ExternalIDSourceEnumInput
  type: ExternalIDTypeEnumInput
  value: StringFilterInput
}

input FactCreateDto {
  content: String!
  isSpoiler: Boolean!
  movieId: String!
}

type FactModel {
  content: String!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  isSpoiler: Boolean!
  movieId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type FactModelEdge {
  cursor: String!
  node: FactModel!
}

input FactPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type FactPaginationModel {
  edges: [FactModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input FactUpdateDto {
  content: String
  isSpoiler: Boolean
  movieId: String
}

type FilmographyEntryMovieModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  movieId: String!
  person: PersonModel!
  role: PersonRoleType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type FilmographyEntryPersonModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  movie: MovieModel!
  personId: String!
  role: PersonRoleType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input GenreCreateDto {
  slug: String!
  title: String!
}

type GenreModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  images: [ImageLinkModel!]
  pageInfo: PageInfoModel!
  pageInfoId: String!
  slug: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type GenreModelEdge {
  cursor: String!
  node: GenreModel!
}

input GenrePaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  title: String
  updatedAt: DateFilterInput
}

type GenrePaginationModel {
  edges: [GenreModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input GenreRelationInput {
  every: GenreWhereInput
  none: GenreWhereInput
  some: GenreWhereInput
}

input GenreUpdateDto {
  slug: String
  title: String
}

input GenreWhereInput {
  id: UuidFilterInput
  slug: StringFilterInput
  title: StringFilterInput
}

"""Format of the image asset"""
enum ImageAssetFormat {
  GIF
  JPEG
  PNG
  WEBP
}

type ImageAssetModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  format: ImageAssetFormat!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  url: String!
  width: ImageAssetWidth!
}

"""Width of the image asset"""
enum ImageAssetWidth {
  ORIGINAL
  W375
  W1366
  W1920
}

type ImageLinkModel {
  countryId: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  genreId: String
  id: ID!
  image: ImageModel!
  movieId: String
  type: ImageType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type ImageModel {
  assets: [ImageAssetModel]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  height: Int!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  width: Int!
}

"""Type of the image"""
enum ImageType {
  BACKDROP
  HERO
  ICON
  LOGO
  PHOTO
  POSTER
  PROFILE
  SEO
  SHOOTING
  STILL
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type MediaAssetModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  duration: Float!
  format: MediaFormat!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  url: String!
}

input MediaCreateDto {
  title: String!
}

"""Format of the media"""
enum MediaFormat {
  MKV
  MP3
  MP4
  OGG
  WAV
  WEBM
}

type MediaLinkModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  media: MediaModel!
  movieId: String!
  type: MediaType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MediaModel {
  assets: [MediaAssetModel!]!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  image: ImageLinkModel
  source: MediaSource!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type MediaModelEdge {
  cursor: String!
  node: MediaModel!
}

input MediaPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type MediaPaginationModel {
  edges: [MediaModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Source of the media"""
enum MediaSource {
  S3
  VIMEO
  YOUTUBE
}

"""Type of the media"""
enum MediaType {
  AUDIO
  BACKDROP
  TEASER
  TRAILER
  VIDEO
}

input MediaUpdateDto {
  title: String
}

input MovieCreateDto {
  description: String
  originalTitle: String
  slug: String!
  title: String!
  type: MovieType!
  year: Int!
}

type MovieModel {
  collection: [CollectionModel]
  countries: [CountryModel]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  externalIDs: [ExternalIDModel]
  facts: [FactModel]
  genres: [GenreModel]
  id: ID!
  images: [ImageLinkModel]
  medias: [MediaLinkModel]
  originalTitle: String
  pageInfo: PageInfoModel!
  pageInfoId: String!
  persons: [FilmographyEntryMovieModel]
  rating: RatingModel
  ratingId: String!
  releases: [ReleaseDateModel]
  seasons: [SeasonModel]
  slides: [SlideModel]
  slug: String!
  title: String!
  type: MovieType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  year: Int!
}

type MovieModelEdge {
  cursor: String!
  node: MovieModel!
}

input MoviePaginationDto {
  countries: CountryRelationInput
  createdAt: DateFilterInput
  externalID: ExternalIdRelationInput
  genres: GenreRelationInput
  id: UuidFilterInput
  rating: RatingRelationInput
  slug: StringFilterInput
  title: StringFilterInput
  type: MovieTypeEnumInput
  updatedAt: DateFilterInput
  year: NumberFilterInput
}

type MoviePaginationModel {
  edges: [MovieModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Type of the movie"""
enum MovieType {
  MOVIE
  TV_SERIES
}

input MovieTypeEnumInput {
  equals: MovieType
  in: [MovieType!]
  notIn: [MovieType!]
}

input MovieUpdateDto {
  description: String
  originalTitle: String
  slug: String
  title: String
  type: MovieType
  year: Int
}

type Mutation {
  addEpisodes(data: CreateEpisodesInput!): SeasonModel!
  changePassword(data: ChangePasswordInput!): User!
  createBlock(data: BlockCreateDto!): BlockModel!
  createCollection(data: CollectionCreateDto!): CollectionModel!
  createCountry(data: CountryCreateDto!): CountryModel!
  createExternalID(data: ExternalIDCreateDto!): ExternalIDModel!
  createExternalIds(data: CreateExternalIDsInput!): [ExternalIDModel!]!
  createFact(data: FactCreateDto!): FactModel!
  createFacts(data: CreateFactsInput!): [FactModel!]!
  createGenre(data: GenreCreateDto!): GenreModel!
  createGenres(data: CreateGenresInput!): [GenreModel!]!
  createManyVendorRating(data: CreateManyVendorRatingInput!, ratingId: String!): RatingModel!
  createMedia(data: MediaCreateDto!): MediaModel!
  createMovie(data: MovieCreateDto!): MovieModel!
  createPage(data: PageCreateDto!): PageModel!
  createPerson(data: PersonCreateDto!): PersonModel!
  createReleaseDates(data: CreateReleaseDatesInput!): [ReleaseDateModel!]!
  createSeason(data: SeasonCreateDto!): SeasonModel!
  createSeos(data: CreateManySeoInput!): [SeoModel!]!
  createSlide(data: SlideCreateDto!): SlideModel!
  createSlider(data: SliderCreateDto!): SliderModel!
  deleteBlock(id: String!): BlockModel!
  deleteCollection(id: String!): CollectionModel!
  deleteCountry(id: String!): CountryModel!
  deleteExternalID(id: String!): ExternalIDModel!
  deleteFact(id: String!): FactModel!
  deleteGenre(id: String!): GenreModel!
  deleteMedia(id: String!): MediaModel!
  deleteMovie(id: String!): MovieModel!
  deletePage(id: String!): PageModel!
  deletePerson(id: String!): PersonModel!
  deleteSeason(id: String!): SeasonModel!
  deleteSlide(id: String!): SlideModel!
  deleteSlider(id: String!): SliderModel!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  signup(data: SignupInput!): Auth!
  updateBlock(data: BlockUpdateDto!, id: String!): BlockModel!
  updateCollection(data: CollectionUpdateDto!, id: String!): CollectionModel!
  updateCountry(data: CountryUpdateDto!, id: String!): CountryModel!
  updateEpisodes(data: UpdateEpisodeInput!, id: String!): SeasonModel!
  updateExternalID(data: ExternalIDUpdateDto!, id: String!): ExternalIDModel!
  updateFact(data: FactUpdateDto!, id: String!): FactModel!
  updateGenre(data: GenreUpdateDto!, id: String!): GenreModel!
  updateMedia(data: MediaUpdateDto!, id: String!): MediaModel!
  updateMovie(data: MovieUpdateDto!, id: String!): MovieModel!
  updatePage(data: PageUpdateDto!, id: String!): PageModel!
  updatePageInfo(data: UpdatePageInfoInput!): PageInfoModel!
  updatePerson(data: PersonUpdateDto!, id: String!): PersonModel!
  updateSeason(data: SeasonUpdateDto!, id: String!): SeasonModel!
  updateSeos(data: UpdateManySeoInput!): [SeoModel!]!
  updateSlide(data: SlideUpdateDto!, id: String!): SlideModel!
  updateSlider(data: SliderUpdateDto!, id: String!): SliderModel!
  updateUser(data: UpdateUserInput!): User!
  updateVendorRating(data: UpdateVendorRatingInput!, di: String!): RatingModel!
}

input NumberFilterInput {
  contains: Int
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NumberFilterInput
  notIn: [Int!]
}

input PageCreateDto {
  isPublished: Boolean!
  slug: String!
  title: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PageInfoModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  seo: [SeoModel]
  title: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PageModel {
  blocks: [BlockModel!]

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  isPublished: Boolean!
  pageInfo: PageInfoModel!
  pageInfoId: String!
  slug: String!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PageModelEdge {
  cursor: String!
  node: PageModel!
}

input PagePaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  isPublished: BooleanFilterInput!
  updatedAt: DateFilterInput
}

type PagePaginationModel {
  edges: [PageModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input PageUpdateDto {
  isPublished: Boolean
  slug: String
  title: String
}

input PersonCreateDto {
  name: String!
  slug: String!
}

type PersonModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  externalID: [ExternalIDModel]
  filmography: [FilmographyEntryPersonModel]
  id: ID!
  images: [ImageLinkModel]
  name: String!
  slug: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type PersonModelEdge {
  cursor: String!
  node: PersonModel!
}

input PersonPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type PersonPaginationModel {
  edges: [PersonModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""Role of the person"""
enum PersonRoleType {
  ACTOR
  CINEMATOGRAPHER
  COMPOSER
  DIRECTOR
  EDITOR
  PRODUCER
  WRITER
}

input PersonUpdateDto {
  id: String!
  name: String!
  slug: String!
}

type Query {
  findManyBlock(data: BlockPaginationDto!): BlockPaginationModel!
  findManyCollection(data: CollectionPaginationDto!): CollectionPaginationModel!
  findManyCountry(data: CountryPaginationDto!): CountryPaginationModel!
  findManyExternalID(data: ExternalIDPaginationDto!): ExternalIDPaginationModel!
  findManyFact(data: FactPaginationDto!): FactPaginationModel!
  findManyGenre(data: GenrePaginationDto!): GenrePaginationModel!
  findManyMedia(data: MediaPaginationDto!): MediaPaginationModel!
  findManyMovie(data: MoviePaginationDto!): MoviePaginationModel!
  findManyPage(data: PagePaginationDto!): PagePaginationModel!
  findManyPerson(data: PersonPaginationDto!): PersonPaginationModel!
  findManySeason(data: SeasonPaginationDto!): SeasonPaginationModel!
  findManySlide(data: SlidePaginationDto!): SlidePaginationModel!
  findManySlider(data: SliderPaginationDto!): SliderPaginationModel!
  findOneBlock(id: String!): BlockModel!
  findOneCollection(id: String!): CollectionModel!
  findOneCountry(id: String!): CountryModel!
  findOneExternalID(id: String!): ExternalIDModel!
  findOneFact(id: String!): FactModel!
  findOneGenre(id: String!): GenreModel!
  findOneMedia(id: String!): MediaModel!
  findOneMovie(id: String!): MovieModel!
  findOnePage(id: String!): PageModel!
  findOnePerson(id: String!): PersonModel!
  findOneSeason(id: String!): SeasonModel!
  findOneSlide(id: String!): SlideModel!
  findOneSlider(id: String!): SliderModel!
  images: [ImageModel!]!
  me: User!
  pageInfo(id: String!): PageInfoModel!
}

type RatingModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  value: Int!
  vendorRatings: [VendorRatingModel]
}

input RatingRelationInput {
  is: RatingWhereInput
  isNot: RatingWhereInput
}

input RatingVendorEnumInput {
  equals: VendorType
  in: [VendorType!]
  notIn: [VendorType!]
}

input RatingWhereInput {
  value: NumberFilterInput
  vendorRating: VendorRatingInput
}

type ReleaseDateModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  date: DateTime!
  id: ID!
  movieId: String!
  type: ReleaseDateType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Type of the release date"""
enum ReleaseDateType {
  DIGITAL
  PHYSICAL
  THEATRICAL
  TV
  WORLDWIDE
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SeasonCreateDto {
  movieId: String!
  number: Int!
}

type SeasonModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  episodes: [EpisodeModel]
  id: ID!
  movieId: String!
  number: Int!
  releaseDate: ReleaseDateModel

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SeasonModelEdge {
  cursor: String!
  node: SeasonModel!
}

input SeasonPaginationDto {
  createdAt: DateFilterInput
  id: UuidFilterInput
  updatedAt: DateFilterInput
}

type SeasonPaginationModel {
  edges: [SeasonModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input SeasonUpdateDto {
  items: [CreateSeasonInput!]
}

type SeoModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String
  id: ID!
  image: ImageLinkModel
  imageId: String
  pageInfoId: String!
  title: String
  type: SeoType!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

"""Type of SEO"""
enum SeoType {
  BASIC
  JSONLD
  OPEN_GRAPH
  TWITTER_CARD
}

input SignupInput {
  email: String!
  name: String
  password: String!
}

input SlideCreateDto {
  title: String!
}

type SlideModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  description: String!
  id: ID!
  images: [ImageLinkModel!]
  movie: MovieModel
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SlideModelEdge {
  cursor: String!
  node: SlideModel!
}

input SlidePaginationDto {
  id: UuidFilterInput
}

type SlidePaginationModel {
  edges: [SlideModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input SlideUpdateDto {
  title: String
}

input SliderCreateDto {
  title: String!
}

type SliderModel {
  block: BlockModel

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  slides: [SlideModel!]

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type SliderModelEdge {
  cursor: String!
  node: SliderModel!
}

input SliderPaginationDto {
  id: UuidFilterInput
}

type SliderPaginationModel {
  edges: [SliderModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

input SliderUpdateDto {
  title: String
}

input StringFilterInput {
  contains: String
  equals: String
  in: [String!]
  not: StringFilterInput
  notIn: [String!]
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateEpisodeInput {
  number: Int
  title: String
}

input UpdateManySeoInput {
  items: [UpdateSeoInput!]!
}

input UpdatePageInfoInput {
  description: String
  id: String!
  title: String
}

input UpdateSeoInput {
  description: String
  id: String!
  title: String
}

input UpdateUserInput {
  name: String
}

input UpdateVendorRatingInput {
  value: Float!
}

type User {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

input UuidFilterInput {
  equals: String
  in: [String!]
  notIn: [String!]
}

input VendorRatingInput {
  every: VendorRatingWhereInput
  none: VendorRatingWhereInput
  some: VendorRatingWhereInput
}

type VendorRatingModel {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  ratingId: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
  value: Float!
  vendor: VendorType
}

input VendorRatingWhereInput {
  value: NumberFilterInput
  vendor: RatingVendorEnumInput
}

"""Vendor rating"""
enum VendorType {
  IMDB
  KINOPOISK
  ROTTEN_TOMATOES
  TMDB
}